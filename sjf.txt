#include <stdio.h>
#include <stdlib.h>

struct process {
    int id, at, bt, wt, tt, ct;
};

void sortByArrival(struct process p[], int n) {
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (p[j].at > p[j + 1].at)
                { struct process temp = p[j]; p[j] = p[j + 1]; p[j + 1] = temp; }
}

int main() {
    int n, t = 0, completed = 0;
    float avg_wt = 0, avg_tt = 0;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    struct process p[n];
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        p[i].id = i + 1; scanf("%d%d", &p[i].at, &p[i].bt);
        p[i].wt = p[i].tt = p[i].ct = 0;
    }

    sortByArrival(p, n);

    while (completed < n) {
        int idx = -1, min_bt = 9999;
        for (int i = 0; i < n; i++) {
            if (p[i].at <= t && p[i].ct == 0 && p[i].bt < min_bt) {
                min_bt = p[i].bt;
                idx = i;
            }
        }
        if (idx != -1) {
            t += p[idx].bt;
            p[idx].ct = t;
            p[idx].tt = p[idx].ct - p[idx].at;
            p[idx].wt = p[idx].tt - p[idx].bt;
            avg_wt += p[idx].wt;
            avg_tt += p[idx].tt;
            completed++;
            printf("P%d ", p[idx].id);  // Gantt chart
        } else {
            t++;
        }
    }

    printf("\n\nID\tWT\tTT\n");
    for (int i = 0; i < n; i++)
        printf("P%d\t%d\t%d\n", p[i].id, p[i].wt, p[i].tt);

    printf("Average Waiting Time: %.2f\n", avg_wt / n);
    printf("Average Turnaround Time: %.2f\n", avg_tt / n);
    return 0;
}