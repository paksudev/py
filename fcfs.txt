#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_PROCESSES 100

typedef struct {
    int id;
    int arrival_time;
    int burst_time;
    int turnaround_time;
    int waiting_time;
} Process;

int get_random_burst_time() {
    return rand() % 10 + 1;
}

void calculate_fcfs(Process processes[], int n) {
    int total_turnaround_time = 0, total_waiting_time = 0;
    int current_time = 0;

    printf("\nGantt Chart:\n");
    for (int i = 0; i < n; i++) {
        if (current_time < processes[i].arrival_time) {
            current_time = processes[i].arrival_time;
        }
        printf("| P%d ", processes[i].id);
        current_time += processes[i].burst_time + 2;
        
        processes[i].turnaround_time = current_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
        
        total_turnaround_time += processes[i].turnaround_time;
        total_waiting_time += processes[i].waiting_time;
        
        if (i < n - 1) {
            processes[i + 1].burst_time = get_random_burst_time();
        }
    }
    printf("|\n");
    
    printf("\nProcess\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t\t%d\n", processes[i].id, processes[i].turnaround_time, processes[i].waiting_time);
    }
    
    printf("\nAverage Turnaround Time: %.2f", (float)total_turnaround_time / n);
    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / n);
}

int main() {
    int n;
    Process processes[MAX_PROCESSES];
    
    srand(time(0));
    
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for P%d: ", processes[i].id);
        scanf("%d", &processes[i].arrival_time);
        processes[i].burst_time = get_random_burst_time();
    }
    
    calculate_fcfs(processes, n);
    
    return 0;
}